
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Mar 17 20:42:34 BOT 2024
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Mar 17 20:42:34 BOT 2024
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\063\000\002\002\004\000\002\002\011\000\002\002" +
    "\010\000\002\002\007\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\005\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\004\005\000\002\004\007\000\002\004\007" +
    "\000\002\004\006\000\002\004\006\000\002\004\005\000" +
    "\002\004\007\000\002\004\007\000\002\004\006\000\002" +
    "\004\006\000\002\004\011\000\002\004\010\000\002\004" +
    "\010\000\002\004\011\000\002\004\011\000\002\004\005" +
    "\000\002\006\011\000\002\015\010\000\002\015\011\000" +
    "\002\015\012\000\002\013\003\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\006\000\002\013" +
    "\007\000\002\007\015\000\002\010\011\000\002\011\013" +
    "\000\002\012\011\000\002\014\012\000\002\014\011\000" +
    "\002\005\005\000\002\005\004\000\002\005\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\242\000\006\007\006\036\004\001\002\000\004\030" +
    "\237\001\002\000\004\002\236\001\002\000\004\036\007" +
    "\001\002\000\004\030\010\001\002\000\004\031\011\001" +
    "\002\000\004\032\012\001\002\000\022\006\021\007\025" +
    "\010\017\011\022\014\020\015\024\040\026\043\015\001" +
    "\002\000\020\006\ufff4\007\ufff4\010\ufff4\011\ufff4\013\ufff4" +
    "\014\ufff4\033\ufff4\001\002\000\020\006\ufff2\007\ufff2\010" +
    "\ufff2\011\ufff2\013\ufff2\014\ufff2\033\ufff2\001\002\000\004" +
    "\030\221\001\002\000\020\006\ufffc\007\ufffc\010\ufffc\011" +
    "\ufffc\013\ufffc\014\ufffc\033\ufffc\001\002\000\004\040\201" +
    "\001\002\000\004\030\173\001\002\000\006\026\153\040" +
    "\154\001\002\000\004\030\141\001\002\000\020\006\021" +
    "\007\115\010\017\011\022\013\121\014\020\033\140\001" +
    "\002\000\004\030\101\001\002\000\006\026\061\040\062" +
    "\001\002\000\004\016\033\001\002\000\020\006\ufff6\007" +
    "\ufff6\010\ufff6\011\ufff6\013\ufff6\014\ufff6\033\ufff6\001\002" +
    "\000\020\006\ufff8\007\ufff8\010\ufff8\011\ufff8\013\ufff8\014" +
    "\ufff8\033\ufff8\001\002\000\020\006\ufff3\007\ufff3\010\ufff3" +
    "\011\ufff3\013\ufff3\014\ufff3\033\ufff3\001\002\000\020\006" +
    "\ufffa\007\ufffa\010\ufffa\011\ufffa\013\ufffa\014\ufffa\033\ufffa" +
    "\001\002\000\004\042\034\001\002\000\004\037\035\001" +
    "\002\000\006\027\037\040\040\001\002\000\004\037\051" +
    "\001\002\000\006\031\uffdd\037\uffdd\001\002\000\004\024" +
    "\041\001\002\000\012\005\043\027\044\040\045\042\042" +
    "\001\002\000\006\031\uffdb\037\uffdb\001\002\000\006\005" +
    "\046\040\047\001\002\000\006\031\uffdc\037\uffdc\001\002" +
    "\000\006\031\uffda\037\uffda\001\002\000\006\031\uffd9\037" +
    "\uffd9\001\002\000\004\005\050\001\002\000\006\031\uffd8" +
    "\037\uffd8\001\002\000\006\026\053\040\054\001\002\000" +
    "\022\006\uffd2\007\uffd2\010\uffd2\011\uffd2\013\uffd2\014\uffd2" +
    "\031\uffd2\033\uffd2\001\002\000\004\040\060\001\002\000" +
    "\006\025\055\026\056\001\002\000\004\042\057\001\002" +
    "\000\022\006\uffd0\007\uffd0\010\uffd0\011\uffd0\013\uffd0\014" +
    "\uffd0\031\uffd0\033\uffd0\001\002\000\022\006\uffd1\007\uffd1" +
    "\010\uffd1\011\uffd1\013\uffd1\014\uffd1\031\uffd1\033\uffd1\001" +
    "\002\000\022\006\uffcf\007\uffcf\010\uffcf\011\uffcf\013\uffcf" +
    "\014\uffcf\031\uffcf\033\uffcf\001\002\000\004\040\077\001" +
    "\002\000\012\016\066\025\063\026\065\037\064\001\002" +
    "\000\004\042\075\001\002\000\020\006\ufff1\007\ufff1\010" +
    "\ufff1\011\ufff1\013\ufff1\014\ufff1\033\ufff1\001\002\000\004" +
    "\037\074\001\002\000\004\042\067\001\002\000\004\037" +
    "\070\001\002\000\024\006\uffef\007\uffef\010\uffef\011\uffef" +
    "\013\uffef\014\uffef\027\037\033\uffef\040\040\001\002\000" +
    "\004\037\072\001\002\000\006\026\053\040\054\001\002" +
    "\000\022\006\uffd3\007\uffd3\010\uffd3\011\uffd3\013\uffd3\014" +
    "\uffd3\031\uffd3\033\uffd3\001\002\000\020\006\uffee\007\uffee" +
    "\010\uffee\011\uffee\013\uffee\014\uffee\033\uffee\001\002\000" +
    "\004\037\076\001\002\000\020\006\ufff0\007\ufff0\010\ufff0" +
    "\011\ufff0\013\ufff0\014\ufff0\033\ufff0\001\002\000\004\037" +
    "\100\001\002\000\020\006\uffed\007\uffed\010\uffed\011\uffed" +
    "\013\uffed\014\uffed\033\uffed\001\002\000\006\007\103\040" +
    "\026\001\002\000\004\031\110\001\002\000\004\040\104" +
    "\001\002\000\004\016\105\001\002\000\004\042\106\001" +
    "\002\000\004\037\107\001\002\000\006\027\037\040\040" +
    "\001\002\000\004\032\111\001\002\000\022\006\021\007" +
    "\025\010\017\011\022\014\020\015\024\040\026\043\015" +
    "\001\002\000\020\006\021\007\115\010\017\011\022\013" +
    "\121\014\020\033\116\001\002\000\020\006\ufffd\007\ufffd" +
    "\010\ufffd\011\ufffd\013\ufffd\014\ufffd\033\ufffd\001\002\000" +
    "\004\013\121\001\002\000\006\026\061\040\133\001\002" +
    "\000\020\006\uffd4\007\uffd4\010\uffd4\011\uffd4\013\uffd4\014" +
    "\uffd4\033\uffd4\001\002\000\020\006\ufff7\007\ufff7\010\ufff7" +
    "\011\ufff7\013\ufff7\014\ufff7\033\ufff7\001\002\000\020\006" +
    "\ufff9\007\ufff9\010\ufff9\011\ufff9\013\ufff9\014\ufff9\033\ufff9" +
    "\001\002\000\004\032\123\001\002\000\020\006\ufffb\007" +
    "\ufffb\010\ufffb\011\ufffb\013\ufffb\014\ufffb\033\ufffb\001\002" +
    "\000\022\006\021\007\025\010\017\011\022\014\020\015" +
    "\024\040\026\043\015\001\002\000\020\006\021\007\115" +
    "\010\017\011\022\013\121\014\020\033\125\001\002\000" +
    "\004\014\126\001\002\000\004\030\127\001\002\000\006" +
    "\027\037\040\040\001\002\000\004\031\131\001\002\000" +
    "\004\037\132\001\002\000\020\006\uffd5\007\uffd5\010\uffd5" +
    "\011\uffd5\013\uffd5\014\uffd5\033\uffd5\001\002\000\012\016" +
    "\134\025\063\026\065\037\064\001\002\000\004\042\135" +
    "\001\002\000\004\037\136\001\002\000\020\006\uffef\007" +
    "\uffef\010\uffef\011\uffef\013\uffef\014\uffef\033\uffef\001\002" +
    "\000\020\006\ufff5\007\ufff5\010\ufff5\011\ufff5\013\ufff5\014" +
    "\ufff5\033\ufff5\001\002\000\004\002\000\001\002\000\006" +
    "\027\037\040\040\001\002\000\004\031\143\001\002\000" +
    "\004\032\144\001\002\000\022\006\021\007\025\010\017" +
    "\011\022\014\020\015\024\040\026\043\015\001\002\000" +
    "\020\006\021\007\115\010\017\011\022\013\121\014\020" +
    "\033\146\001\002\000\022\006\uffe1\007\uffe1\010\uffe1\011" +
    "\uffe1\012\147\013\uffe1\014\uffe1\033\uffe1\001\002\000\004" +
    "\032\150\001\002\000\022\006\021\007\025\010\017\011" +
    "\022\014\020\015\024\040\026\043\015\001\002\000\020" +
    "\006\021\007\115\010\017\011\022\013\121\014\020\033" +
    "\152\001\002\000\020\006\uffd7\007\uffd7\010\uffd7\011\uffd7" +
    "\013\uffd7\014\uffd7\033\uffd7\001\002\000\004\040\171\001" +
    "\002\000\012\016\160\025\155\026\157\037\156\001\002" +
    "\000\004\042\167\001\002\000\020\006\uffec\007\uffec\010" +
    "\uffec\011\uffec\013\uffec\014\uffec\033\uffec\001\002\000\004" +
    "\037\166\001\002\000\004\042\161\001\002\000\006\037" +
    "\163\041\162\001\002\000\004\042\164\001\002\000\020" +
    "\006\uffea\007\uffea\010\uffea\011\uffea\013\uffea\014\uffea\033" +
    "\uffea\001\002\000\004\037\165\001\002\000\020\006\uffe7" +
    "\007\uffe7\010\uffe7\011\uffe7\013\uffe7\014\uffe7\033\uffe7\001" +
    "\002\000\020\006\uffe9\007\uffe9\010\uffe9\011\uffe9\013\uffe9" +
    "\014\uffe9\033\uffe9\001\002\000\004\037\170\001\002\000" +
    "\020\006\uffeb\007\uffeb\010\uffeb\011\uffeb\013\uffeb\014\uffeb" +
    "\033\uffeb\001\002\000\004\037\172\001\002\000\020\006" +
    "\uffe8\007\uffe8\010\uffe8\011\uffe8\013\uffe8\014\uffe8\033\uffe8" +
    "\001\002\000\006\027\037\040\040\001\002\000\004\031" +
    "\175\001\002\000\004\032\176\001\002\000\022\006\021" +
    "\007\025\010\017\011\022\014\020\015\024\040\026\043" +
    "\015\001\002\000\020\006\021\007\115\010\017\011\022" +
    "\013\121\014\020\033\200\001\002\000\020\006\uffd6\007" +
    "\uffd6\010\uffd6\011\uffd6\013\uffd6\014\uffd6\033\uffd6\001\002" +
    "\000\010\016\204\025\202\037\203\001\002\000\004\005" +
    "\213\001\002\000\020\006\uffe2\007\uffe2\010\uffe2\011\uffe2" +
    "\013\uffe2\014\uffe2\033\uffe2\001\002\000\004\005\205\001" +
    "\002\000\006\005\206\040\207\001\002\000\004\037\212" +
    "\001\002\000\004\005\210\001\002\000\004\037\211\001" +
    "\002\000\020\006\uffe3\007\uffe3\010\uffe3\011\uffe3\013\uffe3" +
    "\014\uffe3\033\uffe3\001\002\000\020\006\uffe5\007\uffe5\010" +
    "\uffe5\011\uffe5\013\uffe5\014\uffe5\033\uffe5\001\002\000\006" +
    "\005\214\040\215\001\002\000\004\037\220\001\002\000" +
    "\004\005\216\001\002\000\004\037\217\001\002\000\020" +
    "\006\uffe4\007\uffe4\010\uffe4\011\uffe4\013\uffe4\014\uffe4\033" +
    "\uffe4\001\002\000\020\006\uffe6\007\uffe6\010\uffe6\011\uffe6" +
    "\013\uffe6\014\uffe6\033\uffe6\001\002\000\004\005\222\001" +
    "\002\000\006\005\223\040\224\001\002\000\004\031\234" +
    "\001\002\000\006\005\225\040\226\001\002\000\004\031" +
    "\232\001\002\000\004\005\227\001\002\000\004\031\230" +
    "\001\002\000\004\037\231\001\002\000\020\006\uffde\007" +
    "\uffde\010\uffde\011\uffde\013\uffde\014\uffde\033\uffde\001\002" +
    "\000\004\037\233\001\002\000\020\006\uffdf\007\uffdf\010" +
    "\uffdf\011\uffdf\013\uffdf\014\uffdf\033\uffdf\001\002\000\004" +
    "\037\235\001\002\000\020\006\uffe0\007\uffe0\010\uffe0\011" +
    "\uffe0\013\uffe0\014\uffe0\033\uffe0\001\002\000\004\002\001" +
    "\001\002\000\004\031\240\001\002\000\004\032\241\001" +
    "\002\000\024\006\021\007\025\010\017\011\022\014\020" +
    "\015\024\033\243\040\026\043\015\001\002\000\020\006" +
    "\021\007\115\010\017\011\022\013\121\014\020\033\244" +
    "\001\002\000\004\002\ufffe\001\002\000\004\002\uffff\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\242\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\022\004\015\006" +
    "\031\007\027\010\026\012\013\014\012\015\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\112\006\121\007" +
    "\117\010\116\011\113\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\070\001\001\000\002\001\001\000\004\005\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\070\001\001\000\002\001\001\000\022\003" +
    "\111\004\015\006\031\007\027\010\026\012\013\014\012" +
    "\015\030\001\001\000\014\004\112\006\121\007\117\010" +
    "\116\011\113\001\001\000\002\001\001\000\004\011\136" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\003\123\004\015\006\031\007\027\010\026\012" +
    "\013\014\012\015\030\001\001\000\014\004\112\006\121" +
    "\007\117\010\116\011\113\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\127\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\141\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\003\144\004\015" +
    "\006\031\007\027\010\026\012\013\014\012\015\030\001" +
    "\001\000\014\004\112\006\121\007\117\010\116\011\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\003" +
    "\150\004\015\006\031\007\027\010\026\012\013\014\012" +
    "\015\030\001\001\000\014\004\112\006\121\007\117\010" +
    "\116\011\113\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\173\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\003\176" +
    "\004\015\006\031\007\027\010\026\012\013\014\012\015" +
    "\030\001\001\000\014\004\112\006\121\007\117\010\116" +
    "\011\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\241\004\015\006" +
    "\031\007\027\010\026\012\013\014\012\015\030\001\001" +
    "\000\014\004\112\006\121\007\117\010\116\011\113\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    private String production="none";

    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

public void setProduction(String production) {
        this.production = production;
    }

    public String getProduction() {
        return this.production;
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIA_FOR ::= Entero Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // HACER_MIENTRAS ::= Hacer Llave_a SENTENCIA Llave_c Mientras Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("HACER_MIENTRAS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // MIENTRAS ::= Mientras Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MIENTRAS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SI_SINO ::= Si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c Sino Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SI_SINO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // IMPRIMIR ::= Presentar Parentesis_a Comillas Identificador Identificador Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // IMPRIMIR ::= Presentar Parentesis_a Comillas Identificador Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // IMPRIMIR ::= Presentar Parentesis_a Comillas Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SI ::= Si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SI",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= Cadena Identificador P_coma 
            {
              Object RESULT =null;
		 parser.setProduction("DECLARACION"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;
		 parser.setProduction("DECLARACION"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;
		 parser.setProduction("DECLARACION"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;
		 parser.setProduction("DECLARACION"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Comillas P_coma 
            {
              Object RESULT =null;
		 parser.setProduction("DECLARACION"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= T_dato Identificador Igual Numero P_Flotante Numero P_coma 
            {
              Object RESULT =null;
		 parser.setProduction("DECLARACION"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= T_dato Op_incremento Identificador P_coma 
            {
              Object RESULT =null;
		 parser.setProduction("DECLARACION"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= T_dato Identificador Op_incremento P_coma 
            {
              Object RESULT =null;
		 parser.setProduction("DECLARACION"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= T_dato Identificador Igual Numero P_coma 
            {
              Object RESULT =null;
		 parser.setProduction("DECLARACION"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= T_dato Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;
		 parser.setProduction("DECLARACION"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= T_dato Identificador P_coma 
            {
              Object RESULT =null;
		 parser.setProduction("DECLARACION"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= Entero Op_incremento Identificador P_coma 
            {
              Object RESULT =null;
		 parser.setProduction("DECLARACION"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= Entero Identificador Op_incremento P_coma 
            {
              Object RESULT =null;
		 parser.setProduction("DECLARACION"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= Entero Identificador Igual Numero P_coma 
            {
              Object RESULT =null;
		 parser.setProduction("DECLARACION"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION ::= Entero Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;
		 parser.setProduction("DECLARACION"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION ::= Entero Identificador P_coma 
            {
              Object RESULT =null;
		 parser.setProduction("DECLARACION"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= IMPRIMIR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA HACER_MIENTRAS HACER_MIENTRAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= MIENTRAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA MIENTRAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SI_SINO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= SENTENCIA SI_SINO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= SI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= SENTENCIA SI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= Main Parentesis_a Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;
		 parser.setProduction("INICIO"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Entero Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		 parser.setProduction("INICIO"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

